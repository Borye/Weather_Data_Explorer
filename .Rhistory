}
else{
pre3[i] <- 0
}
}
confusionMatrix(vowel.test$y, pre3)
?matrix
matrix(nrow = 1, ncol = 10)
class(pre1)
pre1
rep(0, 10)
rep(NA, 10)
pre3 <- rep(NA, length(pre1))
for(i in 1 : length(pre1)){
if(pre1[i] == pre2[i]){
pre3[i] <- pre1[i]
}
else{
pre3[i] <- 0
}
}
confusionMatrix(vowel.test$y, pre3)
dim(pre3)
pre3 <- rep(NA, length(pre1))
for(i in 1 : length(pre1)){
if(pre1[i] == pre2[i]){
pre3[i] <- pre1[i]
}
else{
pre3[i] <- as.factor(0)
}
}
confusionMatrix(vowel.test$y, pre3)
vowel.test[pre1 == pre2]
vowel.test[pre1 == pre2, ]
dim(vowel.test)
head(pre1)
head(pre2)
dim(pre1)
tail(pre1)
confusionMatrix(test$y, test[pre1 == pre2, ]$y)
class(test$y)
confusionMatrix(vowel.test$y, vowel.test[pre1 == pre2, ]$y)
dim(vowel.test)
dim(vowel.test[pre1 == pre2, ])
330/462
head(training)
str(training)
library(caret)
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
set.seed(62433)
str(training)
pre1 <- train(diagnosis ~ ., method = "rf", data = training)
confusionMatrix(testing$diagnosis, predict(pre1, testing))
confusionMatrix(testing$diagnosis, predict(pre1, testing))
confusionMatrix(testing$diagnosis, predict(pre1, testing))$Accuracy
pre2 <- train(diagnosis ~ ., method = "gbm", data = training)
confusionMatrix(testing$diagnosis, predict(pre2, testing))
pre3 <- train(diagnosis ~ ., method = "lda", data = training)
confusionMatrix(testing$diagnosis, predict(pre3, testing))
preDf <- data.frame(pre1, pre2, diagnosis = testing$diagnosis)
combModFit <- train(diagnosis ~ ., method = "gam", data = preDf)
confusionMatrix(testing$diagnosis, predict(combModFit, testing))
predDF <- data.frame(pred1, pred2, wage = testing$wage)
preDf <- data.frame(pre1, pre2, diagnosis = testing$diagnosis)
dim(pre1)
pre1
preDf <- data.frame(predict(pre1, testing), predict(pre2, testing), predict(pre3, testing), diagnosis = testing$diagnosis)
combModFit <- train(diagnosis ~ ., method = "gam", data = preDf)
confusionMatrix(testing$diagnosis, predict(combModFit, testing))
predict(combModFit, testing)
combModFit
head(preDf)
confusionMatrix(testing$diagnosis, predict(combModFit, preDf))
confusionMatrix(preDf$diagnosis, predict(combModFit, preDf))
confusionMatrix(testing$diagnosis, predict(pre1, testing))
confusionMatrix(testing$diagnosis, predict(pre2, testing))
confusionMatrix(testing$diagnosis, predict(pre3, testing))
predict(combModFit, preDf)
preDf$diagnosis
combModFit <- train(diagnosis ~ ., method = "gam", data = preDf)
confusionMatrix(preDf$diagnosis, predict(combModFit, preDf))
confusionMatrix(preDf$diagnosis, predict(combModFit, preDf, type = "prob"))
confusionMatrix(preDf$diagnosis, predict(combModFit, preDf))
library(caret)
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
set.seed(62433)
pre1 <- train(diagnosis ~ ., method = "rf", data = training)
confusionMatrix(testing$diagnosis, predict(pre1, testing))
pre2 <- train(diagnosis ~ ., method = "gbm", data = training)
confusionMatrix(testing$diagnosis, predict(pre2, testing))
pre3 <- train(diagnosis ~ ., method = "lda", data = training)
confusionMatrix(testing$diagnosis, predict(pre3, testing))
preDf <- data.frame(predict(pre1, testing), predict(pre2, testing), predict(pre3, testing), diagnosis = testing$diagnosis)
combModFit <- train(diagnosis ~ ., method = "gam", data = preDf)
confusionMatrix(preDf$diagnosis, predict(combModFit, preDf))
predDf
head(preDf)
combModFit
##------------------------------Combining predictors--------------------------
## Model stacking
library(ISLR)
data(Wage)
library(ggplot2)
library(caret)
## create a building data set and validation set
Wage <- subset(Wage, select = -logwage)
inBuild <- createDataPartition(y = Wage$wage, p = 0.7, list = FALSE)
validation <- Wage[-inBuild, ]
buildData <- Wage[inBuild, ]
inTrain <- createDataPartition(y = buildData$wage, p = 0.7, list = FALSE)
training <- buildData[inTrain, ]
testing <- buildData[-inTrain, ]
dim(training)
dim(testing)
dim(validation)
## build two different models
mod1 <- train(wage ~ ., method = "glm", data = training)
mod2 <- train(wage ~ ., method = "rf", data = training, trControl = trainControl(method = "cv"), number = 3)
## predict on the testing test
pred1 <- predict(mod1, testing)
pred2 <- predict(mod2, testing)
qplot(pred1, pred2, colour = wage, data = testing)
## fit a model that combines predictors
predDF <- data.frame(pred1, pred2, wage = testing$wage)
predDF
combModFit <- train(wage ~ ., method = "gam", data = predDF)
combPred <- predict(combModFit, predDF)
combPred
combModFit
comfusionMatrix(predDF$wage, combPred)
confusionMatrix(predDF$wage, combPred)
head(predDF)
dim(predDF$wage)
dim(predDF)
length(combPred)
class(predDF)
class(predDF$wage)
class(combPred)
confusionMatrix(predDF$wage, combPred)
head(predDF#wage)
head(predDF$wage)
head(combPred)
head(testing$wage)
sqrt(sum((combPred - testing$wage)^2))
confusionMatrix(testing$wage, combPred)
dim(testing)
length(combPred)
length(testing$wage)
x <- testing$wage
y <- combPred
confusionMatrix(x, y)
x
y
class(x)
class(y)
confusionMatrix(as.factor(x), as.factor(y))
table(x, y)
confusionMatrix(as.factor(x), as.factor(y))
confusionMatrix(x, y)
length(levels(x))
length(levels(y))
length(levels(x)) != length(levels(y))
confusionMatrix(x, y)
confusionMatrix(x, y)
confusionMatrix(c(1, 2, 3), c(3, 4, 5))
confusionMatrix(testing$diagnosis, predict(pre2, testing))
set.seed(3523)
library(AppliedPredictiveModeling)
library(caret)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(3523)
library(e1071)
modFit <- svm(CompressiveStrength ~ ., data = training)
pre <- predict(modFit, testing)
confusionMatrix(testing$CompressiveStrength, pre)
head(testing)
head(pre)
pre[1]
testing$CompressiveStrength[1]
testing$CompressiveStrength - pre
sqrt(mean((pre - testing$CompressiveStrength)^2))
sqrt(mean((pre - testing$CompressiveStrength)^2))
sqrt(mean((pre - testing$CompressiveStrength)^2))
sqrt(mean((pre - testing$CompressiveStrength)^2))
library(knitr)
library(markdown)
?knit
knit("C:/Users/bliap/Document/GitHub/Data-Science-Specialization/08-PracticalMachineLearning/Project/WLE_Project/Code/project.Rmd")
knit("Document/GitHub/Data-Science-Specialization/08-PracticalMachineLearning/Project/WLE_Project/Code/project.Rmd")
knit("C:/Users/bliap/Document/GitHub/Data-Science-Specialization/08-PracticalMachineLearning/Project/WLE_Project/Code/project.Rmd")
knit("./R")
knit("./R/rankhopital.R")
getwd()
knit("plot3")
knit("fitting.R")
knit("./R/corr.R")
x <- data.frame(foo = 1:4, bar = c(T,F,F,F))
x
x
y <- 1:3
x
x
y <- data.frame(foo = 5:8, bar = c(F, T, F, T))
y
x
df1 = data.frame(id=sample(1:10), x=rnorm(10))
df2 = data.frame(id=sample(1:10), y=rnorm(10))
df3 = data.frame(id=sample(1:10), z=rnorm(10))
dfList = list(df1, df2, df3)
join_all(dfList)
arrange(join(df1, df2), id)
library(plyr)
df1 = data.frame(id=sample(1:10), x=rnorm(10))
df2 = data.frame(id=sample(1:10), y=rnorm(10))
df3 = data.frame(id=sample(1:10), z=rnorm(10))
dfList = list(df1, df2, df3)
join_all(dfList)
arrange(join(df1, df2), id)
df1
df2
x
y
merge(x, y, all = TRUE)
shiny::runApp('GitHub/Data-Science-Specialization/09-DevelopingDataProducts/Project/Shiny')
shiny::runApp('GitHub/Data-Science-Specialization/09-DevelopingDataProducts/Project/Shiny')
shiny::runApp('GitHub/Data-Science-Specialization/09-DevelopingDataProducts/Project/Shiny')
shiny::runApp('GitHub/Data-Science-Specialization/09-DevelopingDataProducts/Project/Shiny')
shiny::runApp('GitHub/Data-Science-Specialization/09-DevelopingDataProducts/Project/Shiny')
shiny::runApp('GitHub/Data-Science-Specialization/09-DevelopingDataProducts/Project/Shiny')
shiny::runApp('GitHub/Data-Science-Specialization/09-DevelopingDataProducts/Project/Shiny')
shiny::runApp('GitHub/Data-Science-Specialization/09-DevelopingDataProducts/Project/Shiny')
shiny::runApp('GitHub/Data-Science-Specialization/09-DevelopingDataProducts/Project/Shiny')
shiny::runApp('GitHub/Data-Science-Specialization/09-DevelopingDataProducts/Project/Shiny')
shiny::runApp('GitHub/Data-Science-Specialization/09-DevelopingDataProducts/Project/Shiny')
shiny::runApp('GitHub/Data-Science-Specialization/09-DevelopingDataProducts/Project/Shiny')
shiny::runApp('GitHub/Data-Science-Specialization/09-DevelopingDataProducts/Project/Shiny')
shiny::runApp('GitHub/Data-Science-Specialization/09-DevelopingDataProducts/Project/Shiny')
shiny::runApp('GitHub/Data-Science-Specialization/09-DevelopingDataProducts/Project/Shiny')
shiny::runApp('GitHub/Data-Science-Specialization/09-DevelopingDataProducts/Project/Shiny')
shiny::runApp('GitHub/Data-Science-Specialization/09-DevelopingDataProducts/Project/Shiny')
shiny::runApp('GitHub/Data-Science-Specialization/09-DevelopingDataProducts/Project/Shiny')
shiny::runApp('GitHub/Data-Science-Specialization/09-DevelopingDataProducts/Project/Shiny')
shiny::runApp('GitHub/Data-Science-Specialization/09-DevelopingDataProducts/Project/Shiny')
shiny::runApp('GitHub/Data-Science-Specialization/09-DevelopingDataProducts/Project/Shiny')
shiny::runApp('GitHub/Data-Science-Specialization/09-DevelopingDataProducts/Project/Shiny')
shiny::runApp('GitHub/Data-Science-Specialization/09-DevelopingDataProducts/Project/Shiny')
shiny::runApp('GitHub/Data-Science-Specialization/09-DevelopingDataProducts/Project/Shiny')
shiny::runApp('GitHub/Data-Science-Specialization/09-DevelopingDataProducts/Project/Shiny')
shiny::runApp('GitHub/Data-Science-Specialization/09-DevelopingDataProducts/Project/Shiny')
shiny::runApp('GitHub/Data-Science-Specialization/09-DevelopingDataProducts/Project/Shiny')
shiny::runApp('GitHub/Data-Science-Specialization/09-DevelopingDataProducts/Project/Shiny')
shiny::runApp('GitHub/Data-Science-Specialization/09-DevelopingDataProducts/Project/Shiny')
shiny::runApp('GitHub/Data-Science-Specialization/09-DevelopingDataProducts/Project/Shiny')
shiny::runApp('GitHub/Data-Science-Specialization/09-DevelopingDataProducts/Project/Shiny')
shiny::runApp('GitHub/Data-Science-Specialization/09-DevelopingDataProducts/Project/Shiny')
shiny::runApp('GitHub/Data-Science-Specialization/09-DevelopingDataProducts/Project/Shiny')
shiny::runApp('GitHub/Data-Science-Specialization/09-DevelopingDataProducts/Project/Shiny')
shiny::runApp('GitHub/Data-Science-Specialization/09-DevelopingDataProducts/Project/Shiny')
shiny::runApp('GitHub/Data-Science-Specialization/09-DevelopingDataProducts/Project/Shiny')
shiny::runApp('GitHub/Data-Science-Specialization/09-DevelopingDataProducts/Project/Shiny')
shiny::runApp('GitHub/Data-Science-Specialization/09-DevelopingDataProducts/Project/Shiny')
shiny::runApp('GitHub/Data-Science-Specialization/09-DevelopingDataProducts/Project/Shiny')
shiny::runApp('GitHub/Data-Science-Specialization/09-DevelopingDataProducts/Project/Shiny')
shiny::runApp('GitHub/Data-Science-Specialization/09-DevelopingDataProducts/Project/Shiny')
shiny::runApp('GitHub/Data-Science-Specialization/09-DevelopingDataProducts/Project/Shiny')
shiny::runApp('GitHub/Data-Science-Specialization/09-DevelopingDataProducts/Project/Shiny')
shiny::runApp('GitHub/Data-Science-Specialization/09-DevelopingDataProducts/Project/Shiny')
shiny::runApp('GitHub/Data-Science-Specialization/09-DevelopingDataProducts/Project/Shiny')
shiny::runApp('GitHub/Data-Science-Specialization/09-DevelopingDataProducts/Project/Shiny')
shiny::runApp('GitHub/Data-Science-Specialization/09-DevelopingDataProducts/Project/Shiny')
shiny::runApp('GitHub/Data-Science-Specialization/09-DevelopingDataProducts/Project/Shiny')
shiny::runApp('GitHub/Data-Science-Specialization/09-DevelopingDataProducts/Project/Shiny')
shiny::runApp('GitHub/Data-Science-Specialization/09-DevelopingDataProducts/Project/Shiny')
shiny::runApp('GitHub/Data-Science-Specialization/09-DevelopingDataProducts/Project/Shiny')
shiny::runApp('GitHub/Data-Science-Specialization/09-DevelopingDataProducts/Project/Shiny')
shiny::runApp('GitHub/Data-Science-Specialization/09-DevelopingDataProducts/Project/Shiny')
shiny::runApp('GitHub/Data-Science-Specialization/09-DevelopingDataProducts/Project/Shiny')
shiny::runApp('GitHub/Data-Science-Specialization/09-DevelopingDataProducts/Project/Shiny')
shiny::runApp('GitHub/Data-Science-Specialization/09-DevelopingDataProducts/Project/Shiny')
shiny::runApp('GitHub/Data-Science-Specialization/09-DevelopingDataProducts/Project/Shiny')
shiny::runApp('GitHub/Data-Science-Specialization/09-DevelopingDataProducts/Project/Shiny')
shiny::runApp('GitHub/Data-Science-Specialization/09-DevelopingDataProducts/Project/Shiny')
shiny::runApp('GitHub/Data-Science-Specialization/09-DevelopingDataProducts/Project/Shiny')
shiny::runApp('GitHub/Data-Science-Specialization/09-DevelopingDataProducts/Project/Shiny')
shiny::runApp('GitHub/Data-Science-Specialization/09-DevelopingDataProducts/Project/Shiny')
shiny::runApp('GitHub/Data-Science-Specialization/09-DevelopingDataProducts/Project/Shiny')
shiny::runApp('GitHub/Data-Science-Specialization/09-DevelopingDataProducts/Project/Shiny')
shiny::runApp('GitHub/Data-Science-Specialization/09-DevelopingDataProducts/Project/Shiny')
shiny::runApp('GitHub/Data-Science-Specialization/09-DevelopingDataProducts/Project/Shiny')
shiny::runApp('GitHub/Data-Science-Specialization/09-DevelopingDataProducts/Project/Shiny')
shiny::runApp('GitHub/Data-Science-Specialization/09-DevelopingDataProducts/Project/Shiny')
shiny::runApp('GitHub/Data-Science-Specialization/09-DevelopingDataProducts/Project/Shiny')
shiny::runApp('GitHub/Data-Science-Specialization/09-DevelopingDataProducts/Project/Shiny')
shiny::runApp('GitHub/Data-Science-Specialization/09-DevelopingDataProducts/Project/Shiny')
shiny::runApp('GitHub/Data-Science-Specialization/09-DevelopingDataProducts/Project/Shiny')
shiny::runApp('GitHub/Data-Science-Specialization/09-DevelopingDataProducts/Project/Shiny')
shiny::runApp('GitHub/Data-Science-Specialization/09-DevelopingDataProducts/Project/Shiny')
shiny::runApp('GitHub/Data-Science-Specialization/09-DevelopingDataProducts/Project/Shiny')
shiny::runApp('GitHub/Data-Science-Specialization/09-DevelopingDataProducts/Project/Shiny')
shiny::runApp('GitHub/Data-Science-Specialization/09-DevelopingDataProducts/Project/Shiny')
shiny::runApp('GitHub/Data-Science-Specialization/09-DevelopingDataProducts/Project/Shiny')
shiny::runApp('GitHub/Data-Science-Specialization/09-DevelopingDataProducts/Project/Shiny')
shiny::runApp('GitHub/Data-Science-Specialization/09-DevelopingDataProducts/Project/Shiny')
shiny::runApp('GitHub/Data-Science-Specialization/09-DevelopingDataProducts/Project/Shiny')
shiny::runApp('GitHub/Data-Science-Specialization/09-DevelopingDataProducts/Project/Shiny')
shiny::runApp('GitHub/Data-Science-Specialization/09-DevelopingDataProducts/Project/Shiny')
shiny::runApp('GitHub/Data-Science-Specialization/09-DevelopingDataProducts/Project/Shiny')
shiny::runApp('GitHub/Data-Science-Specialization/09-DevelopingDataProducts/Project/Shiny')
Sys.setlocale()
filename = paste0("C:/Users/bliap/Documents/R/weather/weather_", 6, ".csv")
weather = read.csv(filename, sep = ",", header = TRUE, encoding = "UTF-8")
for(i in 7:29){
filename = paste0("C:/Users/bliap/Documents/R/weather/weather_", i, ".csv")
weather = merge(weather, read.csv(filename, sep = ",", header = TRUE, encoding = "UTF-8"), all = TRUE)
}
weather$city = stri_escape_unicode(weather$city)    ## change to unicode
weather$WD = stri_escape_unicode(weather$WD)      ## change to unicode
weather = weather[-694, ]
weather$temp <- as.numeric(weather$temp)
weather$WSE <- as.numeric(weather$WSE)
weather$SD <- as.numeric(sub("%", "", weather$SD))/100
weather$time <- as.POSIXlt(paste("2015-01-13", weather$time), format = "%Y-%m-%d %H:%M", origin = "2015-01-13 00:00:00")
weather$t_json <- as.numeric(weather$time)
weather$degree <- 10
for(i in 1:dim(weather)[1]){
if(weather$WD[i] == "\\u5317\\u98ce"){
weather$degree[i] <- 0
}else if(weather$WD[i] == "\\u4e1c\\u5317\\u98ce"){
weather$degree[i] <- 45
}else if(weather$WD[i] == "\\u4e1c\\u98ce"){
weather$degree[i] <- 90
}else if(weather$WD[i] == "\\u4e1c\\u5357\\u98ce"){
weather$degree[i] <- 135
}else if(weather$WD[i] == "\\u5357\\u98ce"){
weather$degree[i] <- 180
}else if(weather$WD[i] == "\\u897f\\u5357\\u98ce"){
weather$degree[i] <- 225
}else if(weather$WD[i] == "\\u897f\\u98ce"){
weather$degree[i] <- 270
}else{
weather$degree[i] <- 315
}
}
weather$province <- 10
for(i in 1:dim(weather)[1]){
if(weather$city[i] == "\\u5317\\u4eac"){
weather$province[i] <- "\\u5317\\u4eac\\u5e02"
}
else if(weather$city[i] == "\\u4e0a\\u6d77"){
weather$province[i] <- "\\u4e0a\\u6d77\\u5e02"
}
else if(weather$city[i] == "\\u5929\\u6d25"){
weather$province[i] <- "\\u5929\\u6d25\\u5e02"
}
else if(weather$city[i] == "\\u91cd\\u5e86"){
weather$province[i] <- "\\u91cd\\u5e86\\u5e02"
}
else if(weather$city[i] == "\\u54c8\\u5c14\\u6ee8"){
weather$province[i] <- "\\u9ed1\\u9f99\\u6c5f\\u7701"
}
else if(weather$city[i] == "\\u957f\\u6625"){
weather$province[i] <- "\\u5409\\u6797\\u7701"
}
else if(weather$city[i] == "\\u6c88\\u9633"){
weather$province[i] <- "\\u8fbd\\u5b81\\u7701"
}
else if(weather$city[i] == "\\u547c\\u548c\\u6d69\\u7279"){
weather$province[i] <- "\\u5185\\u8499\\u53e4\\u81ea\\u6cbb\\u533a"
}
else if(weather$city[i] == "\\u77f3\\u5bb6\\u5e84"){
weather$province[i] <- "\\u6cb3\\u5317\\u7701"
}
else if(weather$city[i] == "\\u4e4c\\u9c81\\u6728\\u9f50"){
weather$province[i] <- "\\u65b0\\u7586\\u7ef4\\u543e\\u5c14\\u81ea\\u6cbb\\u533a"
}
else if(weather$city[i] == "\\u5170\\u5dde"){
weather$province[i] <- "\\u7518\\u8083\\u7701"
}
else if(weather$city[i] == "\\u897f\\u5b81"){
weather$province[i] <- "\\u9752\\u6d77\\u7701"
}
else if(weather$city[i] == "\\u897f\\u5b89"){
weather$province[i] <- "\\u9655\\u897f\\u7701"
}
else if(weather$city[i] == "\\u94f6\\u5ddd"){
weather$province[i] <- "\\u5b81\\u590f\\u56de\\u65cf\\u81ea\\u6cbb\\u533a"
}
else if(weather$city[i] == "\\u90d1\\u5dde"){
weather$province[i] <- "\\u6cb3\\u5357\\u7701"
}
else if(weather$city[i] == "\\u6d4e\\u5357"){
weather$province[i] <- "\\u5c71\\u4e1c\\u7701"
}
else if(weather$city[i] == "\\u592a\\u539f"){
weather$province[i] <- "\\u5c71\\u897f\\u7701"
}
else if(weather$city[i] == "\\u5408\\u80a5"){
weather$province[i] <- "\\u5b89\\u5fbd\\u7701"
}
else if(weather$city[i] == "\\u6b66\\u6c49"){
weather$province[i] <- "\\u6e56\\u5317\\u7701"
}
else if(weather$city[i] == "\\u957f\\u6c99"){
weather$province[i] <- "\\u6e56\\u5357\\u7701"
}
else if(weather$city[i] == "\\u5357\\u4eac"){
weather$province[i] <- "\\u6c5f\\u82cf\\u7701"
}
else if(weather$city[i] == "\\u6210\\u90fd"){
weather$province[i] <- "\\u56db\\u5ddd\\u7701"
}
else if(weather$city[i] == "\\u8d35\\u9633"){
weather$province[i] <- "\\u8d35\\u5dde\\u7701"
}
else if(weather$city[i] == "\\u6606\\u660e"){
weather$province[i] <- "\\u4e91\\u5357\\u7701"
}
else if(weather$city[i] == "\\u5357\\u5b81"){
weather$province[i] <- "\\u5e7f\\u897f\\u58ee\\u65cf\\u81ea\\u6cbb\\u533a"
}
else if(weather$city[i] == "\\u62c9\\u8428"){
weather$province[i] <- "\\u897f\\u85cf\\u81ea\\u6cbb\\u533a"
}
else if(weather$city[i] == "\\u676d\\u5dde"){
weather$province[i] <- "\\u6d59\\u6c5f\\u7701"
}
else if(weather$city[i] == "\\u5357\\u660c"){
weather$province[i] <- "\\u6c5f\\u897f\\u7701"
}
else if(weather$city[i] == "\\u5e7f\\u5dde"){
weather$province[i] <- "\\u5e7f\\u4e1c\\u7701"
}
else if(weather$city[i] == "\\u798f\\u5dde"){
weather$province[i] <- "\\u798f\\u5efa\\u7701"
}
else{
weather$province[i] <- "\\u6d77\\u5357\\u7701"
}
}
Sys.setlocale(, "CHS")
write.csv(weather, "data/weather.csv")
weather <- read.csv("data/weather.csv")
weather$time <- as.POSIXlt(paste(weather$time, format = "%Y-%m-%d %H:%M:%S", origin = "2015-01-13 00:00:00"))
setwd("C:/Users/bliap/Documents/R/Weather_Data_Explorer")
weather <- read.csv("data/weather.csv")
weather$time <- as.POSIXlt(paste(weather$time, format = "%Y-%m-%d %H:%M:%S", origin = "2015-01-13 00:00:00"))
head(weather$time)
weather$time <- as.POSIXlt(paste(weather$time, format = "%Y-%m-%d %H:%M:%S", origin = "2015-01-13 00:00:00", tz = "UTC"))
head(weather$time)
weather$time <- as.POSIXlt(paste(weather$time, format = "%Y-%m-%d %H:%M:%S", origin = "2015-01-13 00:00:00", tz = "GMT"))
head(weather$time)
weather$time <- as.POSIXlt(paste(weather$time, format = "%Y-%m-%d %H:%M:%S", origin = "2015-01-13 00:00:00", tz = "PST8PDT"))
head(weather$time)
weather <- read.csv("data/weather.csv")
weather$time <- as.POSIXlt(paste(weather$time, format = "%Y-%m-%d %H:%M:%S", origin = "2015-01-13 00:00:00", tz = "PST8PDT"))
head(weather$time)
weather <- read.csv("data/weather.csv")
head(weather$time)
weather$time <- as.POSIXlt(paste(weather$time, format = "%Y-%m-%d %H:%M:%S", tz = "PST8PDT"))
head(weather$time)
weather$time <- as.POSIXlt(paste(weather$time, format = "%Y-%m-%d %H:%M:%S", tz = "PST8PDT"))
weather$time[1]
Sys.timezone
Sys.timezone()
weather$time <- as.POSIXlt(paste(weather$time, format = "%Y-%m-%d %H:%M:%S", tz = "Asia/Taipei"))
weather$time[1]
weather$time <- as.POSIXlt(weather$time, format = "%Y-%m-%d %H:%M:%S", tz = "Asia/Taipei")
weather$time[1]
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
deployApp()
library(shinyapps)
deployApp()
deployApp()
deployApp()
shiny::runApp()
deployApp()
Sys.getlocale()
shiny::runApp()
getFromNamespace("checkEncoding", "shiny")(file)
?getFromNamespace("checkEncoding", "shiny")
?getFromNamespace("checkEncoding", "shiny")(ui.R)
getwd()
?getFromNamespace("checkEncoding", "shiny")("ui.R")
?getFromNamespace("checkEncoding", "shiny")
getFromNamespace("checkEncoding", "shiny")
getFromNamespace("checkEncoding", "shiny")("ui.R")
getFromNamespace("checkEncoding", "shiny")("server.R")
getFromNamespace("checkEncoding", "shiny")("global.R")
getFromNamespace("checkEncoding", "shiny")("ui.R")
shiny::runApp()
